#!/usr/bin/python
from gpiozero.exc import *
from gpiozero import Button
import os
import time
import sys
import configparser

##
# EDIT IF NEEDED
##
channels=[
          "SHEET@1NR","SHEET@1FR",
          "SHEET@2NR","SHEET@2FR",
          "SHEET@3NR","SHEET@3FR",
          "SHEET@4NR","SHEET@4FR",
          "SHEET@5NR","SHEET@5FR",
          "SHEET@6NR","SHEET@6FR",
          "SHEET@W1_3FR", "SHEET@W1_3NR", 
          "SHEET@W4_6FR", "SHEET@W4_6NR",
          "SIDEBYSIDE@1","SIDEBYSIDE@2","SIDEBYSIDE@3",
          "SIDEBYSIDE@4","SIDEBYSIDE@5","SIDEBYSIDE@6"
         ]

fifo_path="/tmp/cameractl.fifo"

# GPIO Button pins
# Ref: https://gpiozero.readthedocs.io/en/stable/recipes.html#pin-numbering
# up: GPIO17  down: GPIO27
try:
  print("GPIO17 -> UP")
  ubtn=Button(17)
  print(ubtn)
  print("GPIO27 -> DOWN")
  dbtn=Button(27)
  print(dbtn)
  sys.stdout.flush()
except BadPinFactory:
  print("WARNING: Cannot find GPIO pins, disabling GPIO button support")
  sys.stdout.flush()
  ubtn=None
  dbtn=None

##################################
##
#  DO NOT EDIT BEYOND THIS POINT
##
##################################
config = configparser.ConfigParser()
config['DEFAULT']={'channel':'SHEET@1NR'}

config.read('/etc/omxplayer/camera_control.ini')
default_channel = config['DEFAULT']['channel']
try:
  default_index = channels.index(default_channel)
except:
  default_index = 0

num_channels=len(channels)
current_channel=default_index
print(current_channel)
print(channels[current_channel])

def flush_fifo(f):
  print("flushing fifo")
  sys.stdout.flush()
  d=f.read()
  while len(d) > 0 :
    d=f.read()
  print("done flushing fifo")
  sys.stdout.flush()

def down_btn_pressed():
    global current_channel
    print("Caught Down Button Press") 
    print(ubtn)
    print(dbtn)
    sys.stdout.flush()
    current_channel=channel_down(True)

def up_btn_pressed():
    global current_channel
    print("Caught Up Button Press") 
    print(ubtn)
    print(dbtn)
    sys.stdout.flush()
    current_channel=channel_up(True)

def activate_channel(cnum):
  print("Activating {}".format(channels[cnum]))
  sys.stdout.flush()
  retval=os.system("sudo -n systemctl start {}".format(channels[cnum]))
  return retval

def channel_up(skip_broken=False):
  global current_channel
  start_channel=current_channel
  next_channel=start_channel 
  attempt=0
  while attempt < 20:
    attempt=attempt+1
    next_channel=(next_channel+1) % num_channels
    retval=activate_channel(next_channel)
    if skip_broken:
      if next_channel==start_channel: break
      else:
        if retval==0: break
        else:
          print("Skipping broken channel {}".format(channels[next_channel])) 
          continue  
    else: break
  if retval == 0: 
    print("chan Up: {}:{} -> {}:{}".format(current_channel,channels[current_channel],next_channel,channels[next_channel]))
    sys.stdout.flush()
    return next_channel
  else:
    print("ERROR: chan Up: {}:{} -> {}:{}".format(current_channel,channels[current_channel],next_channel,channels[next_channel]))
    sys.stdout.flush()
    return current_channel

def channel_down(skip_broken=False):
  global current_channel
  start_channel=current_channel
  next_channel=start_channel 
  attempt=0
  while attempt < 20:
    attempt=attempt+1
    next_channel=(next_channel-1) % num_channels
    retval=activate_channel(next_channel)
    if skip_broken:
      if next_channel == start_channel: break
      else:
        if retval == 0: break
        else:   
          print("Skipping broken channel {}".format(channels[next_channel])) 
          continue  
    else: break
  if retval == 0: 
    print("chan Down: {}:{} -> {}:{}".format(current_channel,channels[current_channel],next_channel,channels[next_channel]))
    sys.stdout.flush()
    return next_channel
  else:
    print("ERROR: chan Down: {}:{} -> {}:{}".format(current_channel,channels[current_channel],next_channel,channels[next_channel]))
    sys.stdout.flush()
    return current_channel
  return next_channel

if os.path.exists(fifo_path): os.remove(fifo_path) 

os.mkfifo(fifo_path)
fd=os.open(fifo_path,os.O_RDONLY | os.O_NONBLOCK)
fifo=os.fdopen(fd)
##
# TODO: Select startup channel from argument 
##

retval=os.system("sudo -n fbi --noverbose -a -T 1 /etc/omxplayer/back.png")
retval=activate_channel(current_channel)

if ubtn: ubtn.when_pressed=up_btn_pressed
if dbtn: dbtn.when_pressed=down_btn_pressed

print("Entering fifo wait loop")
sys.stdout.flush()
while True:
  data = fifo.readline()
  if data  == "": 
    time.sleep(0.1)
    continue

  if data[0].upper()=='U': 
    print("fifo UP command recv'd")
    print(ubtn)
    print(dbtn)
    sys.stdout.flush()
    current_channel=channel_up(True)
    flush_fifo(fifo)
    time.sleep(1) 
    continue

  if data[0].upper()=='D':
    print("fifo DOWN command recv'd")
    print(ubtn)
    print(dbtn)
    sys.stdout.flush()
    current_channel=channel_down(True) 
    flush_fifo(fifo)
    time.sleep(1)
    continue

  if data[0].upper()=='B':
    print("fifo BUTTON command recv'd")
    for x in range(28):
      if x == 17: print(ubtn)
      else:
        if x == 27: print(dbtn)
        else: print(Button(x))
    sys.stdout.flush()
    flush_fifo(fifo)
    time.sleep(1)
    continue

print("done")
sys.stdout.flush()
fifo.close()
